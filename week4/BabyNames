/**
 * Print out total number of babies born, as well as for each gender, in a given CSV file of baby name data.
 * 
 * @author Duke Software Team 
 */
import edu.duke.*;
import org.apache.commons.csv.*;
import java.io.File; // for File class

public class BabyBirths {
    public void printNames () {
        FileResource fr = new FileResource();
        for (CSVRecord rec : fr.getCSVParser(false)) {
            int numBorn = Integer.parseInt(rec.get(2));
            if (numBorn <= 100) {
                System.out.println("Name " + rec.get(0) +
                    " Gender " + rec.get(1) +
                           " Num Born " + rec.get(2));
            }
        }
    }
    
    // 1) Modify totalBirths - to also print the number of girls names, the number of boys names, and total names in the file
    public void totalBirths (FileResource fr){
        int totalBirths = 0;
        int totalBoys = 0;
        int totalGirls = 0;
        
        int numBoysNames = 0;
        int numGirlsNames = 0;
        
        for(CSVRecord rec : fr.getCSVParser(false)) {
            int numBorn = Integer.parseInt(rec.get(2));
            totalBirths += numBorn;
            if (rec.get(1).equals("M")) {
                totalBoys += numBorn;
                numBoysNames += 1;
            }
            else {
                totalGirls += numBorn;
                numGirlsNames += 1;
            }
        }
        System.out.println("total births = " + totalBirths);
        System.out.println("female girls = " + totalGirls);
        System.out.println("male boys = " + totalBoys);
        
        System.out.println("total names = " + (int) (numBoysNames + numGirlsNames));
        System.out.println("number of boys names " + numBoysNames);
        System.out.println("number of girls names " + numGirlsNames);
    }
    
    // 2) Write the method getRank - this method returns the rank of the name in the file for the given gender. Where rank 1 is the name with the largest number of births
    // if name is not in the file, then -1 is returned
    public int getRank(int year, String name, String gender){
        String fileName = ("us_babynames_test/" + "yob" + year + "short.csv");
        FileResource fr = new FileResource(fileName);
        
        int rank = 0;
        
        for(CSVRecord record : fr.getCSVParser(false)){
            String currentName = record.get(0);
            String currentGender = record.get(1);
            
            // if the currentGender is not the gender input, continue - to break out of the loop and go on to the next record
            if(!currentGender.equals(gender)){
                continue;
            }
            else{
                rank++;
                if(currentName.equals(name)){
                    return rank;
                }
                else{
                    continue;
                }    
            }    
        }
        // if after the for loop has finished, and there was no return. Then, return - 1 to signify no match found
        return -1;
    }
    
    // 3. method returns the name of the person in the file at this rank, for the given gender, where rank 1 is the name with the lagest number of births
    public String getName(int year, int rank, String gender){
        String fileName = ("us_babynames_test/" + "yob" + year + "short.csv");
        FileResource fr = new FileResource(fileName);
        
        int currentRank = 0;
        String currentName = "";
        
        for(CSVRecord record : fr.getCSVParser(false)){
            String currentGender = record.get(1);
            
            if(!currentGender.equals(gender)){
                // continue - breaks one iteration in the loop (goes back up to the next record)
                continue;
            }
            else{
                currentRank++;
                if(currentRank == rank){
                    currentName = record.get(0);
                    // break out of the function and return the name answer
                    return currentName;
                }
                // else, not the rank we were looking for, continue to go on to the next record in the file
                else{
                    // continue - breaks one iteration in the loop (goes back up to the next record)
                    continue;
                }    
            }
        }
        // If the entire record in the file is ran, and there's no return, then no rank exists. Therefore, return "NO NAME"
        return "NO NAME";
    }
    
    // 4. method determines what name would have been named if they were born in a diff yr, based on same popularity. Same rank and same gender in a diff year
    public void whatIsNameInYear(String name, int year, int newYear, String gender){
        // e.g. files: "yob2012short.csv" and "yob2014short.csv", Isabella is 3rd most popular girl's name in 2012, if it was 2014, it would be Sophia
        
        // 1) Get rank first in old year:
        // int getRank(int year, String name, String gender)
        int rank = getRank(year, name, gender); // this should return 3 if we enter: 2012, "Isabella", "F"
        
        // 2) Next, using the rank from above, get the name in the newYear:
        // public String getName(int year, int rank, String gender)
        String newName = getName(newYear, rank, gender); // this should return Sophia if we enter: 2014, 3 (from above), and "F"
        
        System.out.println(name + " born in " + year + " would be " + newName + " if she was born in " + newYear); 
    }
    
    // 5. method selects a range of files to process, and returns an integer (the year with the highest rank for the name and gender) 
    public int yearOfHighestRank(String name, String gender){
        // e.g. calling with name Mason and "M", and selected 3 test files: 2012, 2013, 2014, it will return 2012 (where he was ranked highest)
        DirectoryResource dr = new DirectoryResource();
        // initialize
        File highestRankFile = null;
        int rank = 9999;
        
        for(File currentFile : dr.selectedFiles()){
            // Get rank for each file and return highest rank:
            // 1) get name of the file selected
            String fullNameOfFile = currentFile.getName();
            // 2) then, get substring of the full name of the file to get the year 
            String stringYear = fullNameOfFile.substring(3, 7);
            // 3) then, convert stringYear into int year
            int year = Integer.parseInt(stringYear);
            
            // Return YEAR of the highest rank
            //public int getRank(int year, String name, String gender) => getRank returns - 1 if nothing found
            int currentRank = getRank(year, name, gender);
            if(currentRank != -1 && currentRank < rank){
                rank = currentRank;
                highestRankFile = currentFile;
            }
            else{
                continue;
            }    
        }
        
        if(rank == 9999){
            return -1;
        }
        else{
            // get the name of the file
            String highestRankStringYear = highestRankFile.getName();
            // get the year
            int highestRankYear = Integer.parseInt(highestRankStringYear.substring(3, 7));
            // return the year
            return highestRankYear;
        }    
    }    
    
    // 6a. create method getRank2 - for getAverageRank method below -- need to remove int year, and add File f
        public int getRank2(String name, String gender, File f){
        // include, create a new FileResource from input f. FileResource allows you to access a file on your computer     
        FileResource fr = new FileResource(f);
        int rank = 0;
        for(CSVRecord record : fr.getCSVParser(false)){
            String currentName = record.get(0);
            String currentGender = record.get(1);
            
            // if the currentGender is not the gender input, continue - to break out of the loop and go on to the next record
            if(!currentGender.equals(gender)){
                continue;
            }
            else{
                rank++;
                if(currentName.equals(name)){
                    return rank;
                }
                else{
                    continue;
                }    
            }    
        }
        // if after the for loop has finished, and there was no return. Then, return - 1 to signify no match found
        return -1;
    }
    // 6. method selects a range of files to process and returns a double representing the AVERAGE rank of the name and gender over the selected files 
    public double getAverageRank(String name, String gender){
        // e.g. getAverageRank(Mason, "M") and selected 3 test files, returns 3.0 : rank 2 in 2012, 4 in 2013, 3 in 2014
        // another e.g. getAverageRank(Jacob, "M") and selected 3 test files, returns 2.66
        DirectoryResource dr = new DirectoryResource();
        int cumRank = 0;
        int fileCounter = 0;
        
        for(File currentFile : dr.selectedFiles()){
            int currentRank = getRank2(name, gender, currentFile);
            if(currentRank == -1){
                continue;
            }    
            else{
                cumRank += currentRank;
                fileCounter++;
            }
        }
        if(fileCounter == 0){
            return -1;
        }
        else{
            return (double)cumRank/fileCounter;
        }
    }    
    
    // 7. method returns an int for the TOTAL number of births of those names with the same gender and same year who are ranked higher than name
    // e.g. yob2012short.csv file, with Ethan, "M", year 2012, this will return 15. Since Jacob is M has 8 births and Mason is M with 7 births and those 2 are ranked higher than Ethan
    public int getTotalBirthsRankedHigher(int year, String name, String gender){
        String fileName = ("us_babynames_test/" + "yob" + year + "short.csv");
        FileResource fr = new FileResource(fileName);
        
        // get the rank of the String name and String gender -> e.g. 2012, Ethan, M
        int inputRank = getRank(year, name, gender);
        
        // initialize
        int cumBirths = 0;
       
        for(CSVRecord record : fr.getCSVParser(false)){
            // make sure we get the rank from the row is the same gender
            String currentGender = record.get(1);
            
            if(!currentGender.equals(gender)){
                // continue - breaks one iteration in the loop (goes back up to the next record)
                continue;
            }
            else{
                String currentRecordName = record.get(0);
                int currentRecordRank = getRank(year, currentRecordName, gender);
                
                if(currentRecordRank < inputRank){
                    cumBirths += Integer.parseInt(record.get(2));
                }
                else{
                    continue;
                }    
            }    
        }
        return cumBirths;
    }    
    
    // TESTS:
    public void testTotalBirths(){
        //FileResource fr = new FileResource();
        FileResource fr = new FileResource("us_babynames_test/yob2012short.csv");
        totalBirths(fr);
    }
    
    public void testGetRank(){
        System.out.println("Females:");
        // Should return 1
        System.out.println(getRank(2012, "Sophia", "F"));
        // Should return 2
        System.out.println(getRank(2012, "Emma", "F"));
        // Should return 3
        System.out.println(getRank(2012, "Isabella", "F"));
        // Should return 4
        System.out.println(getRank(2012, "Olivia", "F"));
        // Should return 5
        System.out.println(getRank(2012, "Ava", "F"));
        
        System.out.println("Males:");
        // Should return 1
        System.out.println(getRank(2012, "Jacob", "M"));
        // Should return 2
        System.out.println(getRank(2012, "Mason", "M"));
        // Should return 3
        System.out.println(getRank(2012, "Ethan", "M"));
        // Should return 4
        System.out.println(getRank(2012, "Noah", "M"));
        // Should return 5
        System.out.println(getRank(2012, "William", "M"));
        
        // Not found:
        System.out.println("Not Found: ");
        System.out.println(getRank(2012, "Elmo", "M"));
    }
    
    public void testGetName(){
        System.out.println(getName(2012, 2, "F"));
    }    
    
    public void testWhatIsNameInYear(){
        whatIsNameInYear("Isabella", 2012, 2014, "F");
    }
    
    public void testYearOfHighestRank(){
        System.out.println(yearOfHighestRank("Mason", "M"));
    }    
        
    public void testGetAverageRank(){
        System.out.println(getAverageRank("Mason", "M"));
        System.out.println(getAverageRank("Jacob", "M"));
    }    
    
    // public int getTotalBirthsRankedHigher(int year, String name, String gender)
    public void testGetTotalBirthsRankedHigher(){
        System.out.println(getTotalBirthsRankedHigher(2012, "Ethan", "M"));
    }    
}
