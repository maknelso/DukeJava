/**
 * Print out total number of babies born, as well as for each gender, in a given CSV file of baby name data.
 * 
 * @author Duke Software Team 
 */
import edu.duke.*;
import org.apache.commons.csv.*;

public class BabyBirths {
    public void printNames () {
        FileResource fr = new FileResource();
        for (CSVRecord rec : fr.getCSVParser(false)) {
            int numBorn = Integer.parseInt(rec.get(2));
            if (numBorn <= 100) {
                System.out.println("Name " + rec.get(0) +
                    " Gender " + rec.get(1) +
                           " Num Born " + rec.get(2));
            }
        }
    }
    
    // 1) Modify totalBirths - to also print the number of girls names, the number of boys names, and total names in the file
    public void totalBirths (FileResource fr){
        int totalBirths = 0;
        int totalBoys = 0;
        int totalGirls = 0;
        
        int numBoysNames = 0;
        int numGirlsNames = 0;
        
        for(CSVRecord rec : fr.getCSVParser(false)) {
            int numBorn = Integer.parseInt(rec.get(2));
            totalBirths += numBorn;
            if (rec.get(1).equals("M")) {
                totalBoys += numBorn;
                numBoysNames += 1;
            }
            else {
                totalGirls += numBorn;
                numGirlsNames += 1;
            }
        }
        System.out.println("total births = " + totalBirths);
        System.out.println("female girls = " + totalGirls);
        System.out.println("male boys = " + totalBoys);
        
        System.out.println("total names = " + (int) (numBoysNames + numGirlsNames));
        System.out.println("number of boys names " + numBoysNames);
        System.out.println("number of girls names " + numGirlsNames);
    }
    
    // 2) Write the method getRank - this method returns the rank of the name in the file for the given gender. Where rank 1 is the name with the largest number of births
    // if name is not in the file, then -1 is returned
    public int getRank(int year, String name, String gender){
        String fileName = ("us_babynames_test/" + "yob" + year + "short.csv");
        FileResource fr = new FileResource(fileName);
        
        int rank = 0;
        
        for(CSVRecord record : fr.getCSVParser(false)){
            String currentName = record.get(0);
            String currentGender = record.get(1);
            
            // if the currentGender is not the gender input, continue - to break out of the loop and go on to the next record
            if(!currentGender.equals(gender)){
                continue;
            }
            else{
                rank++;
                if(currentName.equals(name)){
                    return rank;
                }
                else{
                    continue;
                }    
            }    
        }
        // if after the for loop has finished, and there was no return. Then, return - 1 to signify no match found
        return -1;
    }
    
    // 3. method returns the name of the person in the file at this rank, for the given gender, where rank 1 is the name with the lagest number of births
    public String getName(int year, int rank, String gender){
        String fileName = ("us_babynames_test/" + "yob" + year + "short.csv");
        FileResource fr = new FileResource(fileName);
        
        int currentRank = 0;
        String currentName = "";
        
        for(CSVRecord record : fr.getCSVParser(false)){
            String currentGender = record.get(1);
            
            if(!currentGender.equals(gender)){
                // continue - breaks one iteration in the loop (goes back up to the next record)
                continue;
            }
            else{
                currentRank++;
                if(currentRank == rank){
                    currentName = record.get(0);
                    // break out of the function and return the name answer
                    return currentName;
                }
                // else, not the rank we were looking for, continue to go on to the next record in the file
                else{
                    // continue - breaks one iteration in the loop (goes back up to the next record)
                    continue;
                }    
            }
        }
        // If the entire record in the file is ran, and there's no return, then no rank exists. Therefore, return "NO NAME"
        return "NO NAME";
    }
    
    // 4. method determines what name would have been named if they were born in a diff yr, based on same popularity. Same rank and same gender in a diff year
    public void whatIsNameInYear(String name, int year, int newYear, String gender){
        
        
    }    
    
    // TESTS:
    public void testTotalBirths(){
        //FileResource fr = new FileResource();
        FileResource fr = new FileResource("us_babynames_test/yob2012short.csv");
        totalBirths(fr);
    }
    
    public void testGetRank(){
        System.out.println("Females:");
        // Should return 1
        System.out.println(getRank(2012, "Sophia", "F"));
        // Should return 2
        System.out.println(getRank(2012, "Emma", "F"));
        // Should return 3
        System.out.println(getRank(2012, "Isabella", "F"));
        // Should return 4
        System.out.println(getRank(2012, "Olivia", "F"));
        // Should return 5
        System.out.println(getRank(2012, "Ava", "F"));
        
        System.out.println("Males:");
        // Should return 1
        System.out.println(getRank(2012, "Jacob", "M"));
        // Should return 2
        System.out.println(getRank(2012, "Mason", "M"));
        // Should return 3
        System.out.println(getRank(2012, "Ethan", "M"));
        // Should return 4
        System.out.println(getRank(2012, "Noah", "M"));
        // Should return 5
        System.out.println(getRank(2012, "William", "M"));
        
        // Not found:
        System.out.println("Not Found: ");
        System.out.println(getRank(2012, "Elmo", "M"));
    }
    
    public void testGetName(){
        System.out.println(getName(2012, 2, "F"));
    }    
}
